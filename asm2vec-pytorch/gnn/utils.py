import os
import networkx as nx
import pandas as pd

#load data
def load_data():
    graph_dir = '../embedding/'
    graph_files = os.listdir(graph_dir)
    feature_matrix = []
    edge_index = []
    name = []

    for file in graph_files:
        G = nx.nx_pydot.read_dot(graph_dir + file)

        #if the node has no embedding, add default embedding 0 array
        for node in G.nodes():
            if "embedding" not in G.nodes[node]:
                G.nodes[node]["embedding"] = [0]*200
            else:
                #delete '[' and ']' in the string
                G.nodes[node]["embedding"] = G.nodes[node]["embedding"].replace('[', '').replace(']', '')
                #delete '"' in the string
                G.nodes[node]["embedding"] = G.nodes[node]["embedding"].replace('"', '')

        #get the feature matrix, the order is the same as the adjacency matrix, same as the node index
        #remove \n and \\n
        F = []
        for node in G.nodes():
            #print(type(G.nodes[node]["embedding"]))
            #change the string to list of numbers
            if type(G.nodes[node]["embedding"]) == str:
                embedding = G.nodes[node]["embedding"].replace('\n', '').replace('\\n', '')
                embedding = list(embedding.split(' '))
                embedding = list(filter(None, embedding))
                #change the string to float
                embedding = [float(i) for i in embedding]
            F.append(embedding)
        feature_matrix.append(F)

        #get the edge_index
        edge_index0 = []
        edge_index1 = []
        for edge in G.edges():
            #change the node name to index
            edge_index0.append(list(G.nodes).index(edge[0]))
            edge_index1.append(list(G.nodes).index(edge[1]))
        edge_index.append([edge_index0, edge_index1]) #dimension: 2*edge_num


    #get the label
    label_file = pd.read_csv('dataset.csv')
    unmap_label =label_file['label']
    filenames = label_file['filename']
        
    label = []
    maps = {'malware': 1, 'benignware': 0}
    unmap_label = unmap_label.map(maps)

    #find filname's index and map the label
    for file in graph_files:
        file = file[:-4] #remove .dot
        index = filenames[filenames == file].index[0] 
        label.append(unmap_label[index])
        name.append(file)

    #print('feature_matrix:', feature_matrix)
    #print('edge_index:', edge_index)
    #print('label:', label)

    #print the dimension of feature_matrix, edge_index, label
    #print('feature_matrix:', len(feature_matrix), len(feature_matrix[0]), len(feature_matrix[0][0]))
    #print('edge_index:', len(edge_index), len(edge_index[0]), len(edge_index[0][0]))
    #print('label:', len(label))

    return feature_matrix, edge_index, label, name


load_data()