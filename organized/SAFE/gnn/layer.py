import torch.nn as nn
from torch_geometric.nn import GCNConv
from malwareDetector.config import read_config

class deeperGCN(nn.Module):
    '''
    Deeper Graph Convolutional Network (GCN) module.
    
    Architecture:
    1. Linear layer (input)
    2. Graph Convolution
    3. Deeper GCN blocks (repeated 7 times)
    4. Normalization
    5. Activation
    6. Global mean pooling
    7. Dropout
    8. Linear layer (output)
    9. Softmax

    Each Deeper GCN block consists of:
    1. Normalization
    2. Activation
    3. Dropout
    4. Graph Convolution
    '''

    def __init__(self, in_channels: int, out_channels: int):
        """
        Initialize the deeperGCN module.

        Args:
            in_channels (int): Number of input features.
            out_channels (int): Number of output features.
        """
        super(deeperGCN, self).__init__()
        self.config = read_config()
        self.norm = nn.LayerNorm(out_channels)
        self.act = nn.ReLU()
        self.dropout = nn.Dropout(p=self.config.model.dropout_value)
        self.conv = GCNConv(in_channels, out_channels)

    def forward(self, x, edge_index):
        """
        Forward pass of the deeperGCN module.

        Args:
            x (Tensor): Input node features.
            edge_index (Tensor): Graph connectivity in COO format.

        Returns:
            Tensor: Updated node features after passing through the deeperGCN block.
        """

        x = self.norm(x)
        x = self.act(x)
        x = self.dropout(x)
        x = self.conv(x, edge_index)
        return x
