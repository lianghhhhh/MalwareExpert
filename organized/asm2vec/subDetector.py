from malwareDetector.detector import detector
from typing import Any
import numpy as np
import os
import subprocess

class subDetector(detector):
    def __init__(self) -> None:
        super().__init__()

    def extractFeature(self) -> Any:
        print('Extracting features from the dataset...')
        # run scripts/bin2asm.py to extract features
        #os.system('python scripts/bin2asm.py')
        subprocess.call("python scripts/bin2asm.py", shell=True)
        return None

    def vectorize(self) -> np.array:
        print('Vectorizing the features...')
        # run scripts/asm2vec.py to vectorize the features
        #os.system('python scripts/test.py')
        subprocess.call("python scripts/test.py", shell=True)

    def model(self, training:bool=True) -> Any:
        if training:
            print('Training...')
            subprocess.run(['python', 'gnn/train.py'])
        else:
            print('Load model and train...')
            subprocess.run(['python', 'gnn/load.py'])

    def predict(self) -> np.array:
        print('Predicting the dataset...')
        subprocess.run(['python', 'gnn/predict.py'])

    def explain(self) -> Any:
        print('Explaining the model...')
        subprocess.run(['python', 'gnn/explain.py'])

    def machine_unlearning(self) -> Any:
        print('Machine unlearning...')
        subprocess.run(['python', 'gnn/unlearn.py'])

if __name__ == '__main__':
    myDetector = subDetector()
    #myDetector.extractFeature()
    #print('Training...')
    #os.system('python scripts/train.py')
    #subprocess.call("python scripts/train.py", shell=True)
    myDetector.vectorize()
    #myDetector.model(training=True)
    #myDetector.model(training=False)
    #myDetector.predict()
    #myDetector.explain()
    #myDetector.machine_unlearning()
    