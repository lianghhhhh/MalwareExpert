#create GCN model, MalwareExpert
#linear, graphConv, deeperGCN*n(7), normalization, activation, global mean pooling, dropout, linear, softmax
#deeperGCN: normalization, activation, dropout, graphConv
#use the feature matrix and edge_index(2*num_edge) matrix as input
#use the label as output

import torch.nn as nn
from torch_geometric.nn import GCNConv
from torch_geometric.nn import global_mean_pool
from gnn.layer import deeperGCN

# the model MalwareExpert, use the feature matrix and adjacency matrix as input, use the label as output
class MalwareExpert(nn.Module):
    def __init__(self, input_dim, hidden_dim):
        super(MalwareExpert, self).__init__()
        self.linear = nn.Linear(input_dim, hidden_dim)
        self.graphConv = GCNConv(hidden_dim, hidden_dim)
        self.deeperGCN1 = deeperGCN(hidden_dim, hidden_dim)
        self.deeperGCN2 = deeperGCN(hidden_dim, hidden_dim)
        self.deeperGCN3 = deeperGCN(hidden_dim, hidden_dim)
        self.deeperGCN4 = deeperGCN(hidden_dim, hidden_dim)
        self.deeperGCN5 = deeperGCN(hidden_dim, hidden_dim)
        self.deeperGCN6 = deeperGCN(hidden_dim, hidden_dim)
        self.deeperGCN7 = deeperGCN(hidden_dim, hidden_dim)
        self.norm = nn.LayerNorm(hidden_dim)
        self.activation = nn.ReLU()
        self.global_mean_pool = global_mean_pool
        self.dropout = nn.Dropout(0.5)
        self.linear2 = nn.Linear(hidden_dim, 2)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x, edge_index, data):
        x = self.linear(x)
        x = self.graphConv(x, edge_index)
        x = self.deeperGCN1(x, edge_index)
        x = self.deeperGCN2(x, edge_index)
        x = self.deeperGCN3(x, edge_index)
        x = self.deeperGCN4(x, edge_index)
        x = self.deeperGCN5(x, edge_index)
        x = self.deeperGCN6(x, edge_index)
        x = self.deeperGCN7(x, edge_index)
        x = self.norm(x)
        x = self.activation(x)
        x = self.global_mean_pool(x, data.batch)
        x = self.dropout(x)
        x = self.linear2(x)
        x = self.softmax(x)
        return x
