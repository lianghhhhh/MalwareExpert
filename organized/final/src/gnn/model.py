import torch
import torch.nn as nn
from gnn.layer import deeperGCN
from torch_geometric.typing import Adj
from torch_geometric.nn import GCNConv
from torch_geometric.nn import global_mean_pool

class MalwareExpertModel(nn.Module):
    """
    MalwareExpert Graph Neural Network model for malware detection.
    
    Architecture:
    1. Linear layer
    2. Graph Convolution
    3. 7 deeperGCN layers
    4. Normalization
    5. Activation
    6. Global Mean Pooling
    7. Dropout
    8. Linear layer
    9. Softmax
    """
    def __init__(self, input_dim: int, hidden_dim: int, config: dict=None):
        """
        Initialize the MalwareExpertModel.

        Args:
            input_dim (int): Dimension of input features.
            hidden_dim (int): Dimension of hidden layers.
            config (dict): Configuration dictionary containing model parameters.
        """
        super(MalwareExpertModel, self).__init__()
        self.config = config
        self.linear1 = nn.Linear(input_dim, hidden_dim)
        self.graphConv = GCNConv(hidden_dim, hidden_dim)
        self.deeperGCN1 = deeperGCN(hidden_dim, hidden_dim, self.config.model.dropout_value)
        self.deeperGCN2 = deeperGCN(hidden_dim, hidden_dim, self.config.model.dropout_value)
        self.deeperGCN3 = deeperGCN(hidden_dim, hidden_dim, self.config.model.dropout_value)
        self.deeperGCN4 = deeperGCN(hidden_dim, hidden_dim, self.config.model.dropout_value)
        self.deeperGCN5 = deeperGCN(hidden_dim, hidden_dim, self.config.model.dropout_value)
        self.deeperGCN6 = deeperGCN(hidden_dim, hidden_dim, self.config.model.dropout_value)
        self.deeperGCN7 = deeperGCN(hidden_dim, hidden_dim, self.config.model.dropout_value)
        self.norm = nn.LayerNorm(hidden_dim)
        self.activation = nn.ReLU()
        self.global_mean_pool = global_mean_pool
        self.dropout = nn.Dropout(self.config.model.dropout_value)
        self.linear2 = nn.Linear(hidden_dim, self.config.model.output_dim)
        self.softmax = nn.Softmax(dim=self.config.model.softmax_dim)

    def forward(self, x: torch.Tensor, edge_index: Adj, data: torch.Tensor) -> torch.Tensor:
        """
        Forward pass of the MalwareExpertModel.

        Args:
            x (torch.Tensor): Node feature matrix with shape [num_nodes, input_dim].
            edge_index (Adj): Graph connectivity in COO format with shape [2, num_edges].
            data (torch.Tensor): Data tensor with shape [num_nodes, num_features].

        Returns:
            torch.Tensor: Output tensor with shape [batch_size, output_dim].
        """
        x = self.linear1(x)
        x = self.graphConv(x, edge_index)
        x = self.deeperGCN1(x, edge_index)
        x = self.deeperGCN2(x, edge_index)
        x = self.deeperGCN3(x, edge_index)
        x = self.deeperGCN4(x, edge_index)
        x = self.deeperGCN5(x, edge_index)
        x = self.deeperGCN6(x, edge_index)
        x = self.deeperGCN7(x, edge_index)
        x = self.norm(x)
        x = self.activation(x)
        x = self.global_mean_pool(x, data.batch)
        x = self.dropout(x)
        x = self.linear2(x)
        x = self.softmax(x)
        return x
