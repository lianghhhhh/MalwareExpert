import torch
import torch.nn as nn
from torch_geometric.nn import GCNConv
from torch_geometric.typing import Adj

class deeperGCN(nn.Module):
    """
    A deeper Graph Convolutional Network (GCN) layer with normalization, activation, and dropout.
    """

    def __init__(self, in_channels: int, out_channels: int, dropout_value: float):
        """
        Initialize the deeperGCN layer.

        Args:
            in_channels (int): Number of input features.
            out_channels (int): Number of output features.
            dropout_value (float): Dropout probability.
        """
        super(deeperGCN, self).__init__()
        self.norm = nn.LayerNorm(out_channels)
        self.act = nn.ReLU()
        self.dropout = nn.Dropout(p=dropout_value)
        self.conv = GCNConv(in_channels, out_channels)

    def forward(self, x: torch.Tensor, edge_index: Adj) -> torch.Tensor:
        """
        Forward pass of the deeperGCN layer.

        Args:
            x (torch.Tensor): Input node features of shape [num_nodes, in_channels].
            edge_index (Adj): Graph connectivity in COO (coordinate) format with shape [2, num_edges].

        Returns:
            torch.Tensor: Output node features of shape [num_nodes, out_channels].
        """
        x = self.norm(x)
        x = self.act(x)
        x = self.dropout(x)
        x = self.conv(x, edge_index)
        return x