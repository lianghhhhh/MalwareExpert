# @inproceedings{massarelli2018safe,
#   title={SAFE: Self-Attentive Function Embeddings for Binary Similarity},
#   author={Massarelli, Luca and Di Luna, Giuseppe Antonio and Petroni, Fabio and Querzoni, Leonardo and Baldoni, Roberto},
#   booktitle={Proceedings of 16th Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA)},
#   year={2019}
# }

import sys
import json
import r2pipe

class BinaryAnalyzer():
    """
    A class for analyzing binary files and extracting function information.
    """
    def __init__(self, path):
        """
        Initialize the BinaryAnalyzer with a binary file.

        Args:
            path (str): Path to the binary file to be analyzed.
        """
        self.r2 = r2pipe.open(path, flags=["-2"])
        self.r2.cmd("aaa")
        self.arch = None
        self.bits = None
        try:
            info = json.loads(self.r2.cmd("ij"))["bin"]
            self.arch = info["arch"]
            self.bits = info["bits"]
        except:
            print(f"Error loading file: {path}", file=sys.stderr)
        try:
            self.afl = self.r2.cmdj("aflj")
        except:
            self.afl = []

    def get_hexasm(self, address):
        """
        Get the hexadecimal representation of assembly at a given address.

        Args:
            address (int): The address to disassemble.

        Returns:
            str: A string of hexadecimal bytes representing the assembly at the given address.
        """
        data = filter(None, self.r2.cmd(f"pxf @ {address}").split("\n")[1:])
        hexasm = ""
        for i in data:
            hexasm += "".join(i.split("  ")[1].split())
        return hexasm

    def get_functions(self):
        """
        Get a list of all function addresses in the binary.

        Returns:
            list: A list of unique function addresses (offsets) in the binary.
        """
        offsets = set()
        for f in self.afl:
            offsets.add(f.get("offset", None))
            for call in f.get("callrefs", []):
                if call.get("type", None) == "CALL":
                    offsets.add(call.get("addr", None))
        return list(filter(None, offsets))
