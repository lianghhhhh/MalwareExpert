import sys
import logging
from sisa import SISA
from malwareDetector.config import read_config

def training(logger, config_path):
    """
    Train the SISA model.
    
    This function initializes a SISA object, divides the data, preprocesses it,
    and then trains the model using the SISA algorithm.
    """
    print('Training the model...')
    logger.info('Training the model...')
    mySISA = SISA(logger, config_path)
    mySISA.divide_data()
    mySISA.preprocess(purpose='train')
    mySISA.sisa_training()

def prediction(logger, config_path):
    """
    Make predictions using the trained SISA model.
    
    This function initializes a SISA object, performs majority voting for prediction,
    and then explains the predictions.
    """
    print('Predicting by the model...')
    logger.info('Predicting by the model...')
    mySISA = SISA(logger, config_path)
    mySISA.majority_vote(purpose='predict')
    mySISA.explain()

def unlearning(logger, config_path):
    """
    Unlearn specific data points from the SISA model.
    
    This function initializes a SISA object and performs machine unlearning
    to remove the influence of specific data points from the model.
    """
    print('Unlearning the model...')
    logger.info('Unlearning the model...')
    mySISA = SISA(logger, config_path)
    mySISA.machine_unlearning()

def set_log(log_path: str=None) -> logging.Logger:
    """
        Set up and configure the logger for the detector.

        Args:
            log_path (str): The path to the log file.

        Returns:
            logging.Logger: The configured logger object.
    """
    logger = logging.getLogger("MalwareExpert")
    logger.setLevel(logging.INFO)

    formatter = logging.Formatter('%(asctime)s - %(filename)s - %(levelname)s - %(message)s')
    file_handler = logging.FileHandler(log_path, mode='w')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)

    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(stream_handler)

    logger.info('Program has started')
    return logger

if __name__ == '__main__':
    if len(sys.argv) < 2:
        raise ValueError('Please provide a config')
    config_path = sys.argv[1]
    sys.argv = [sys.argv[0]] # Clear the sys.argv
    config = read_config(config_path)
    logger = set_log(config.path.log)

    if config.train:
        training(logger, config_path)
    elif config.predict:
        prediction(logger, config_path)
    elif config.unlearn:
        unlearning(logger, config_path)

    logger.info('Program has ended')
