# Copyright (c) 2021 oalieno

import os
import sys
import torch
sys.path.insert(0, os.path.abspath('..'))
from package import utils
from malwareDetector.config import read_config

def cli(ipath, opath, mpath, limit, embedding_size=100, batch_size=128, epochs=30, neg_sample_num=25, calc_acc=False, device='auto', lr=0.02):
    """
    ASM2VEC model training or fine-tuning.

    Args:
        ipath (str): Path to the input assembly data.
        opath (str): Path to save the trained model.
        mpath (str): Path to a pre-trained model (if fine-tuning).
        limit (int): Limit on the number of samples to process.
        embedding_size (int): Size of the embedding vectors.
        batch_size (int): Batch size for training.
        epochs (int): Number of training epochs.
        neg_sample_num (int): Number of negative samples for training.
        calc_acc (bool): Whether to calculate accuracy during training.
        device (str): Device to use for computation ('auto', 'cuda', or 'cpu').
        lr (float): Learning rate for training.
    """
    if device == 'auto':
        device = 'cuda' if torch.cuda.is_available() else 'cpu'
    
    if mpath:
        print("loading model...")
        model, tokens = utils.load_model(mpath, device=device)
        print("loading data...")
        functions, tokens_new, offset = utils.load_data(ipath, limit=limit)
        tokens.update(tokens_new)
        model.update(len(functions), tokens.size())
    else:
        model = None
        print("loading data...")
        functions, tokens, offset = utils.load_data(ipath, limit=limit)
    print("data loaded")

    def callback(context):
        """
        Callback function for logging training progress and saving the model.

        Args:
            context (dict): Dictionary containing training context information.
        """
        progress = f'{context["epoch"]} | time = {context["time"]:.2f}, loss = {context["loss"]:.4f}'
        if context["accuracy"]:
            progress += f', accuracy = {context["accuracy"]:.4f}'
        print(progress)
        utils.save_model(opath, context["model"], context["tokens"])

    model = utils.train(
        functions,
        tokens,
        model=model,
        embedding_size=embedding_size,
        batch_size=batch_size,
        epochs=epochs,
        neg_sample_num=neg_sample_num,
        calc_acc=calc_acc,
        device=device,
        callback=callback,
        learning_rate=lr
    )

if __name__ == '__main__':
    if len(sys.argv) < 2:
        raise ValueError('Please provide a config')
    
    config_path = sys.argv[1]
    sys.argv = [sys.argv[0]] # Clear the sys.argv
    config = read_config(config_path)
    ipath = config.folder.feature
    opath = config.path.asm2vec_model
    mpath = config.path.asm2vec_model
    cli(ipath=ipath, opath=opath, mpath=mpath, limit=None)