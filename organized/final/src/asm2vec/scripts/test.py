# Copyright (c) 2021 oalieno

import torch
from ..package import utils

def cli(ipath, mpath, epochs=30, neg_sample_num=25, device='auto', lr=0.02, pretty=False, limit=None):
    if device == 'auto':
        device = 'cuda' if torch.cuda.is_available() else 'cpu'

    # load model, tokens
    model, tokens = utils.load_model(mpath, device=device)
    functions, tokens_new, offset = utils.load_data(ipath)
    tokens.update(tokens_new)
    model.update(1, tokens.size())
    model = model.to(device)

    # train function embedding
    model = utils.train(
        functions,
        tokens,
        model=model,
        epochs=epochs,
        neg_sample_num=neg_sample_num,
        device=device,
        mode='test',
        learning_rate=lr
    )

    # show predicted probability results
    x, y = utils.preprocess(functions, tokens)

    # get the final embedding of the input file
    embedding = model.get_embedding(x.to(device)) # the dim of the embedding is (embedding_size,)
    embedding = embedding.detach().cpu().numpy()
            
    return offset, embedding
