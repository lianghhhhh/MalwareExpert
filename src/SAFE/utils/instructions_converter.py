# @inproceedings{massarelli2018safe,
#   title={SAFE: Self-Attentive Function Embeddings for Binary Similarity},
#   author={Massarelli, Luca and Di Luna, Giuseppe Antonio and Petroni, Fabio and Querzoni, Leonardo and Baldoni, Roberto},
#   booktitle={Proceedings of 16th Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA)},
#   year={2019}
# }

import json

class InstructionsConverter:
    """
    A class for converting assembly instructions to their corresponding numerical IDs.
    """
    def __init__(self, json_i2id):
        """
        Initialize the InstructionsConverter.

        Args:
            json_i2id (str): Path to the JSON file containing the instruction-to-ID mapping.
        """
        f = open(json_i2id, "r")
        self.i2id = json.load(f)
        f.close()

    def convert_to_ids(self, instructions_list):
        """
        Convert a list of assembly instructions to their corresponding numerical IDs.

        Args:
            instructions_list (list): A list of assembly instruction strings to be converted.

        Returns:
            list: A list of numerical IDs corresponding to the input instructions.
        """
        ret_array = []
        # For each instruction we add +1 to its ID because the first
        # element of the embedding matrix is zero
        for x in instructions_list:
            if x in self.i2id:
                ret_array.append(self.i2id[x] + 1)
            elif "X_" in x:
                # print(str(x) + " is not a known x86 instruction")
                ret_array.append(self.i2id["X_UNK"] + 1)
            elif "A_" in x:
                # print(str(x) + " is not a known arm instruction")
                ret_array.append(self.i2id["A_UNK"] + 1)
            else:
                # print("There is a problem " + str(x) + " does not appear
                # to be an asm or arm instruction")
                ret_array.append(self.i2id["X_UNK"] + 1)
        return ret_array
